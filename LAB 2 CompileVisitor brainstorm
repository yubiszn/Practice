/**
 * Visitor that compiles the code.
 * 
 * @author Tim
 * @version Feb 2, 2008
 */
public class CompileVisitor implements Visitor {

    private StringBuilder output = new StringBuilder();
    private int whileLabelCounter = 0;
    private int ifLabelCounter = 0;

    /**
     * Visits a ConstantExpression.
     * 
     * @see Visitor#visit(ConstantExpression)
     * @param expr
     */
    @Override
    public void visit(ConstantExpression expr) {
        output.append("push ").append(expr.getValue()).append("\n");
    }

    /**
     * Visits a VariableExpression.
     * 
     * @see Visitor#visit(VariableExpression)
     * @param expr
     */
    @Override
    public void visit(VariableExpression expr) {
        output.append("push ").append(expr.getName()).append("\n");
    }

    /**
     * Pre-visits a BinaryExpression.
     * 
     * @see Visitor#preVisit(BinaryExpression)
     * @param expr
     */
    @Override
    public void preVisit(BinaryExpression expr) {
        // No pre-visit action needed for BinaryExpression
    }

    /**
     * Visits a BinaryExpression.
     * 
     * @see Visitor#visit(BinaryExpression)
     * @param expr
     */
    @Override
    public void visit(BinaryExpression expr) {
        // This method is called during the infix visitation of binary expressions
        // Specific instructions for each operator handled elsewhere
    }

    /**
     * Post-visits a BinaryExpression using an if-else block.
     * 
     * @see Visitor#postVisit(BinaryExpression)
     * @param expr
     */
    @Override
    public void postVisit(BinaryExpression expr) {
        Operator op = expr.getOperator();
        if (op == Operator.ADD) {
            output.append("add").append("\n");
        } else if (op == Operator.SUBTRACT) {
            output.append("subtract").append("\n");
        } else if (op == Operator.MULTIPLY) {
            output.append("multiply").append("\n");
        } else if (op == Operator.DIVIDE) {
            output.append("divide").append("\n");
        } else {
            throw new IllegalArgumentException("Unsupported operator: " + op);
        }
    }

    /**
     * Pre-visits an AssignStatement.
     * 
     * @see Visitor#preVisit(AssignStatement)
     * @param stmt
     */
    @Override
    public void preVisit(AssignStatement stmt) {
        // No pre-visit action needed for AssignStatement
    }

    /**
     * Post-visits an AssignStatement.
     * 
     * @see Visitor#postVisit(AssignStatement)
     * @param stmt
     */
    @Override
    public void postVisit(AssignStatement stmt) {
        output.append("pop ").append(stmt.getVariable().getName()).append("\n");
    }

    /**
     * Pre-visits a WhileStatement.
     * 
     * @see Visitor#preVisit(WhileStatement)
     * @param stmt
     */
    @Override
    public void preVisit(WhileStatement stmt) {
        output.append("while").append(whileLabelCounter).append(": nop").append("\n");
        whileLabelCounter++;
    }

    /**
     * Called after the condition is visited, but before the body for a WhileStatement.
     * 
     * @see Visitor#preBodyVisit(WhileStatement)
     * @param stmt
     */
    @Override
    public void preBodyVisit(WhileStatement stmt) {
        // Condition already visited in preVisit(WhileStatement), no additional action needed
    }

    /**
     * Post-visits a WhileStatement.
     * 
     * @see Visitor#postVisit(WhileStatement)
     * @param stmt
     */
    @Override
    public void postVisit(WhileStatement stmt) {
        output.append("branchF endwhile").append(whileLabelCounter - 1).append("\n");
        output.append("branch while").append(whileLabelCounter - 1).append("\n");
        output.append("endwhile").append(whileLabelCounter - 1).append(": nop").append("\n");
    }

    /**
     * Pre-visits an IfStatement.
     * 
     * @see Visitor#preVisit(IfStatement)
     * @param stmt
     */
    @Override
    public void preVisit(IfStatement stmt) {
        output.append("if").append(ifLabelCounter).append(": nop").append("\n");
        ifLabelCounter++;
    }

    /**
     * Called after the condition is visited, but before the then block for an IfStatement.
     * 
     * @see Visitor#preThenVisit(IfStatement)
     * @param stmt
     */
    @Override
    public void preThenVisit(IfStatement stmt) {
        // Condition already visited in preVisit(IfStatement), no additional action needed
    }

    /**
     * Called after the then block is visited, but before the else block for an IfStatement.
     * 
     * @see Visitor#preElseVisit(IfStatement)
     * @param stmt
     */
    @Override
    public void preElseVisit(IfStatement stmt) {
        output.append("} else {");
    }

    /**
     * Post-visits an IfStatement.
     * 
     * @see Visitor#postVisit(IfStatement)
     * @param stmt
     */
    @Override
    public void postVisit(IfStatement stmt) {
        output.append("}");
    }

    /**
     * Returns the compiled code.
     * 
     * @return the compiled code as a string
     */
    public String getString() {
        return output.toString();
    }
}
