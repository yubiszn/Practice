Write a recursive method that generates a list of all possible character strings of a given length for a given numeric base. 
For example, generating all base 2 strings of length 3 should yield [000, 001, 010, 011, 100, 101, 110, 111]. 
Generating all base 4 strings of length 2 should yield [00, 01, 02, 03, 10, 11, 12, 13, 20, 21, 22, 23, 30, 31, 32, 33]. 
You should not use any of the built-in Java functions that convert between number bases. Build the strings using the recursive structure of your code.

import java.util.ArrayList;
import java.util.List;

public class StringGenerator {
    public List<String> generateAllStrings(int length, int base) 
    {
        List<String> result = new ArrayList<>();

        if (length == 0)
        {
            result.add("");
            return result;
        }

        List<String> eachString = generateAllStrings(length -1, base); 
            for(String value: eachString) 
            { 
                for (int i = 0; i < base; i++) 
                {
                    result.add(value + Integer.toString(i));
                }
            }
            return result;
    }
        public static void main(String[] args) {
            StringGenerator stringGenerator = new StringGenerator();
            List<String> base2Strings = stringGenerator.generateAllStrings(3,2);
            System.out.println("Base 2 Strings: " + base2Strings);
        }
    }



The Base Case: 

List<String> result = new ArrayList<>();

        if (length == 0)
        {
            result.add("");
            return result;
        }


The Recursive Case: 
 List<String> eachString = generateAllStrings(length -1, base); 
            for(String value: eachString) 
            { 
                for (int i = 0; i < base; i++) 
                {
                    result.add(value + Integer.toString(i));
                }
            }
            return result; 
    }



Breaking down into smaller portions:

The initial call generateBaseStrings(3, 2) breaks down into smaller portions through recursion: generateBaseStrings(2, 2), generateBaseStrings(1, 2), and generateBaseStrings(0, 2).

Base case:
When length becomes 0, the base case is reached, and an empty string is returned.

Filling in the strings:
After reaching the base case, we start filling in the strings by appending digits from the base to each string.
The recursion unfolds in reverse order from the base case back to the initial call: 
generateBaseStrings(0, 2), generateBaseStrings(1, 2), generateBaseStrings(2, 2), and generateBaseStrings(3, 2)


Now, for each string in the list [""], the loop runs twice (once for each digit in base 2), resulting in ["0", "1"].
Back to First Recursive Call:

Now, for each string in the list ["0", "1"], the loop runs twice again (once for each digit in base 2), resulting in ["00", "01", "10", "11"].
Back to Initial Call:

Now, for each string in the list ["00", "01", "10", "11"], the loop runs twice again (once for each digit in base 2), resulting in ["000", "001", "010", "011", "100", "101", "110", "111"].
So, the final list should indeed be ["000", "001", "010", "011", "100", "101", "110", "111"].


To make this happen, In the main method, I will execute that order of recursion calls:
1. Need to first create an instance of StringGenerator because that is the name of the class
2. I need to create a List<Strings> and then set it to that instance and the method: List<String> base2Strings = stringGenerator.generateAllStrings(3,2);
3. Print the list of strings out


