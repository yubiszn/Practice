Write a O(n) method valuesInLevelOrder() that returns a list of the nodes of a binary tree in level-order. That is, the method should return the root, then the nodes at depth 1, 
followed by the nodes at depth 2, and so on. Your algorithm should begin by putting the tree root on an initially empty queue. Then dequeue a node, add it to the output, and enqueue
its left and right children (if they exist). Repeat until the queue is empty




import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

public class Node<E> {
  E data;
  Node<E> leftChild;
  Node<E> rightChild;

  public Node() {

  }

  public Node(E data) {
      this.data = data;
  }

  public Node(Node<E> left, Node<E> right) {
      this.leftChild = left;
      this.rightChild = right;
  }

  public Node(E data, Node<E> left, Node<E> right) {
      this.data = data;
      this.leftChild = left;
      this.rightChild = right;
  }

  public static List<Integer> valuesInLevelOrder(Node<Integer> root) {
  
    List<Integer> result = new ArrayList<>();
    if (root == null) {
        return result;
    }
        

    Queue<Node<Integer>> queue = new LinkedList<>();
    queue.add(root);

    while (!queue.isEmpty()) {
        Node<Integer> currentNode = queue.remove();
        result.add(currentNode.data);

        if (currentNode.leftChild != null)
            queue.add(currentNode.leftChild);

        if (currentNode.rightChild != null)
            queue.add(currentNode.rightChild);
    }

    return result;
  }

  public static void main(String [] args) {
    Node<Integer> thirdLevel1 = new Node(4, null, null);
    Node<Integer> thirdLevel2 = new Node(5, null, null);
    Node<Integer> thirdLevel3 = new Node(6, null, null);
    Node<Integer> thirdLevel4 = new Node(7, null, null);
    
    Node<Integer> secondLevel1 = new Node(2, thirdLevel1, thirdLevel2);
    Node<Integer> secondLevel2 = new Node(3, thirdLevel3, thirdLevel4);
    
    Node<Integer> root = new Node(1, secondLevel1, secondLevel2);
    
    
  
   
  
    List<Integer> list = valuesInLevelOrder(root);
    System.out.println("The nodes of the binary tree in level-order are " + list);

  }
}
