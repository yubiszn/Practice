Understanding the Dart Language Basics

Example code:
void main() {
  String name = "Dart";
  print ("Hello $name!");
}

The main() function is the starting point of every Dart application. 

String name = "Dart"; is a variable declaration. You are declariing a variable called name, of type String, whose value is "Dart"/ 

print ("Hello $name!"); calls the print method and instead of doing a concatenation using the + sign, you use $ and insert a variable
without closing it. It is equivalent to the code:
print ("Hello " + name + "!");

There's also a generic variable declartation, in which you don't specify any type: you write the same code like this:
void main() {
  var name = "Dart";
  print ("Hello $name!");
}
----------------------------------------------------------------------------------------------------------------------------------------
The use of numbers, functions, and parameters in Dart with Area Calculator

There are two types of numbers in Dart with the num type:
int - contains interger values no larger than 64 bits
double - contains 64 but, double percision floating point numbers

Example code:
void main() {
  double result = calculateArea(12,5);
  print ("The result is" + result.toString());
}

You are declaring the variable result, of type double, which takes the return value of a function called calculateArea, which needs to 
be defined late. We are passing two numbers, 12 and 5, to the function. After the functiuon returns its value, we will display the result,
after converting it into a string. Now let's define calculateArea:

double calculateArea(double width, double height) {
  double area = width * height;
  return area;
}

int literals are automatically converted to doubles; for example, you can write double value = 2; This is instead of having to write 
double value = 2.0; 
In the calculateArea() function, the width and height are required. You can also add optional parameters to functions, by including them
in square brackets. If you add an optional parameter, make sure it has a default value because it can't have a null value.

double calculateArea(double width, double height, [bool isTriangle = false]) {
  double area;
  if (isTriangle) {
    area = width * height / 2;
  }
  else {
    area = width * height;
  }
  return area;
}

Now, from the main() method , we can call this function without or without the optional parameter.

void main() {
  double result = calculateArea(12,5,false);
  print("The result for a rectangle is " + result.toString());
  result = calculateArea(12,5,true);
  print("The result for a triangle is " + result.toString());
}

This code produces the result: 
The result of this rectangle is 60
The result of this triangle is 30
----------------------------------------------------------------------------------------------------------------------------------------
For Loops and Strings 

void main() {
  String myString = "Job";
  print(myString);
  
  String result = reverse(myString);   
    print(result);
}
  String reverse(String old) {
    int length = old.length; // sets value of length
    String res = ""; // sets results to "" to get ready to print
   
    for (int i = length - 1; i>=0; i--) {
      res += old.substring(i,i+1); 
      
    // okay let's break this for loop down. we start the for loop by defining i which will be the index. 
       it says i = length - 1. the length of the word - 1 would mean we start with the last letter of that
       word. for example, if the word is job. the length of this word is 3. 3 - 1 = 2. So at index 2, the 
       letter is b which is the last letter of the word. then i will decrement. it will do this as long i is
       greater than of equal to 0. 0 is the start of the index or the first letter. so this is the process of
       the iteration. during this iteration, we will apply the substring method n the string. It will then return
       a new string that is a substring of that string. Substring method takes in two values. The first value is 
       where the string will start and will include that value and the second value is where it stops or "up to" 
       which means it doesn't include that specific value, but everything before it. so if the string old = job the
      operations would look like this after each iteration: 

                    // res += old.substring(2, 2+ 1); which is b
                      
                    // res += old.substring(1, 1+1); which is o 
                      
                    // res += old.substring(0, 0 +1); which is J

                  // the += is important because it adds/connects the result of each iteration to each other to 
                     form the complete word. 
  }
    return res; // this returns the result of the for loop
}
----------------------------------------------------------------------------------------------------------------------------------------
