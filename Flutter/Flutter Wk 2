Miles or Kilometers? Using Stateful Widgets

State:  a way to deal with changes in Flutter. State is information that can be used when a widget is built and
can change during the lifetime of a widget. An important part of the definition is that state is information that
can change. 



1. Stateless Widggets:, they are immutable once they are created meaning does not change

2. Stateful Widget: When a widget has a State, itâ€™s called a stateful widget. It is not the widget itself that will change 
but that it is the state of the widget that will change. You use stateful widgets when you want to change the state of the widget 
and change values

 

You deal with changes in Flutter by using State. 
Each time the State changes, the widget gets rebuilt. The State class overrides a build() method, returning a widget.

In order to update the State, you need to call the setState() method. The setState() method tells the framework that the
state of an object has changed and that the UI needs to be updated. 
----------------------------------------------------------------------------------------------------------------------------
STATELESS WIDGET: Let's examine this code below

import 'package:flutter/material.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Measures Converter',
      home: Scaffold(
      appBar: AppBar(
          title: Text('Measure Converter'),
    ),
    body: Center(
        child: Text('Measures Converter'),
        ),
      ),
    );
  }
}


The code makes use of a stateless widget: 
- class MyApp extends StatelessWidget {

A stateless widget is a class that extends a StatelessWidget. Extending a StatelessWidget class requires overriding a build() 
method/ In this build() method, you describe the widget returned by the method: 
-   @override
    Widget build(BuildContext context) {

The build() method that takes a context and returns a widget:
- return MaterialApp( ...) 

So to summarize, in order to have a stateless widget you need to do the following:
1. Create a class that extends StatelessWidget
2. Override the build() method
3. Return a widget
----------------------------------------------------------------------------------------------------------------------------
STATEFUL WIDGET: Let's examine this code below 

import 'package:flutter/material.dart';

void main() => runApp(MyApp());

class MyApp extends StatefulWidget {
  @override
  MyAppState createState() => MyAppState();
}
class MyAppState extends State<MyApp> {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Measures Converter',
      home: Scaffold(
      appBar: AppBar(
          title: Text('Measure Converter'),
    ),
    body: Center(
        child: Text('Measures Converter'),
        ),
      ),
    );
  }
}

1. A stateful widget requires a createState() method
- class MyApp extends StatefulWidget {

2. In a stateful widget, there is no build() method to override. We will add createState() method which will return
MyAppState which we will create shortly after. In MyApp class, just under its definiton, write the following code:
- @override
  MyAppState createState() => MyAppState();

3. Create a new class called MyAppState, that extends the State, and in particular the State of MyApp
- class MyAppState extends State<MyApp> { ... }

4. copy the code from the build() method we used in MyApp class for stateless widget, and paste it into the MyAppState class
- @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Measures Converter',
      home: Scaffold(
      appBar: AppBar(
          title: Text('Measure Converter'),
    ),
    body: Center(
        child: Text('Measures Converter'),
        ),
      ),
    );
  }
}

In summary, the only difference between Stateless and Stateful is from a syntax perspective:
- Stateless overrides the build() method and returns a widget
- Stateful override a createState() method, which returns a State. The State class overridges a build method 
  and returns a widget

----------------------------------------------------------------------------------------------------------------------------
Reading User input from Textfield

Right under the State class, let's add a member called _numberFrom. This is a value that will change based on user input.
You will need to initialize it so write 0.0 as a starting point:
- double _numberFrom = 0.0;

Then in the body of the build() method, delete the text widget and add TextField instead:
- body: Center(
      child: TextField();
  ),

You use TextField when you want to take some input from your users. You can write into it by clicking over the line and
typing something. Right now it does nothing, so the first thign we need to do is read the value that the user inputs into it.

We will respond to each change in the content of the TextField through the onChanged method, then update the State. 

In order to update the State, you need to call the setState() method. 
The setState() method tells the framework that the state of an object has changed and that the UI needs to be updated.
Inside the setState(0 method, you change the class members that you need to update:
- child: Textfield(
     onChanged: (text) {
      var rv = double.tryParse(text);
      if (rv != null) {
       setState()) {
          _ numberFrom = rv;
          });
         }
       },
    ),

Each time the value of TextField changes(onChanged), we check whether the value that was typed is a number(tryParse).
If it is a number, we change the value of the _numberFrom member. You have updated the State. 
In other words, when you call the setState() method to update the class member, you are updating the State of the class.

We are not giving any feedback to the user though, so unless we use debugging tools of our editor, we cannot actually check
whether the update actually happeneed. In order to fix this, let's add a Text widget that will show the content of the TextEdit widget,
and then wrap the two widgets into a Column widget and add void initState() method to the MyAppState class:


import 'package:flutter/material.dart';

void main() => runApp(MyApp());

class MyApp extends StatefulWidget {
  @override
  MyAppState createState() => MyAppState();
}
class MyAppState extends State<MyApp> {
  double _numberFrom = 0.0;

  void initState() {
    _numberFrom = 0.0;
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Measures Converter',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Measure Converter')
        ),
        body: Center(
          child: Column(
          children:  [
          TextField(
            onChanged: (text) {
            var rv = double.tryParse(text);
             if (rv != null) {
                setState(() {
                     _numberFrom = rv;
                    });
                   }
                 } // onChanged
               ),
            Text((_numberFrom == null) ? '' : _numberFrom.toString())
            ], // Children
          ),
        ),
      )
    );
  } // Widget
} // MyAppState


Now if you write a number in the TextField, the same number will appear in the Text widget.
What is happening:
1. You are setting an initial State of the app through _numberFrom member in the initState() method.
2. The widget is drawn on the screen.
3. You are responding to a TextField event: the onChanged method, which is called every time the content
   of the TextField changes
4. You are changing the State by calling setState() method and there you change the value of _numberFrom.
5. The widget is redrawn with the new State, which contains the number you write in TextField, so the Text widget,
   which reads _numberFrom, contains the modified value of the State.
----------------------------------------------------------------------------------------------------------------------------

CREATING A DROPDOWN BUTTON WIDGET

1. Create an instance of DropdownButton, specifying the type of data that will be included in the list
2. Add an iterms property that will contain the list of items that will be show to the user
3. The items property requires a list of DropdownMenuItem widgets. There you need to map each value that you 
   want to show into DropdownMenuItem
4. Respond to the user actions by specifying an event; typically, for DropdownButton, you will call a function in the 
   OnChanged property.

DropDownButton Example that shows a list of fruits:

var fruits = ['Orange', 'Apple', 'Strawberry', 'Banana']

DropdownButton<String>(
  items: fruits.map((String value) {
    return DropdownMenuItem<String>(
      value: value,
      child: Text(value),
    );
  }
).toList(),
onChanged: (String newValue) {}
),

DropdownButton is a generic, as it's built as DropDownButton<T>, where generic type T, is the type of item in your DropDownButton
widget (in the above example, the type is String)
  - Dart support generics or generic types. for example, a list can contain several types: List<int> is a list of integers, 
    List<String> is a list of strings, and List<dynamic> is a list of objects of any type. Using generics helps to ensure type
    safety: for example, you cannot add a number to List<String>

map() method iterates through all the values of the array, and performs a function on each value of the list. 
The function inside map() method returns a DropDownMenuItem widget, which has a value and child property. 
child is what the user will see which is a Text widget. The value is what you'll use to retrieve the selected item on the list.
The map() method returns a iterable, which is a collection of values that can be accessed sequentially.

Over that, you call toList() method, which creates a list that contains the elements that should be returned. This is required by the items property.

In our app, we will need two DropdownButton widgets, one for the starting unit and one for the converted unit.
1. Create a list of strings that will contain all the measures that we want to deal with. At the beginning of the State class, add:

    final List<String> _measures = [
      'meters',
      'kilometers',
      'grams',
      'kilograms',
      'feet',
      'miles',
      'pounds (lbs)',
      'ounces',
   ];


2. Next, create a DropDownButton widget, that will read the values of the list and place it at the top of the column, above TextField:

   DropdownButton (
      items: _measures.map((String value) {
         return DropdownMenuItem<String>(
           value: value,
           child: Text(value),
          );
        }
      ).toList(),
      onChanged: (_) {},
   ), 



Updated Code on The App
------------------------

import 'package:flutter/material.dart';

void main() => runApp(MyApp());

class MyApp extends StatefulWidget {
  @override
  MyAppState createState() => MyAppState();
}
class MyAppState extends State<MyApp> {
  double _numberFrom = 0.0;

  void initState() {
    _numberFrom = 0.0;
    super.initState();
  }

  final List<String> _measures = [
    'meters',
    'kilometers',
    'grams',
    'kilograms',
    'feet',
    'miles',
    'pounds (lbs)',
    'ounces',
  ];

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Measures Converter',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Measure Converter')
        ),
        body: Center(
          child: Column(
            children:  [
              DropdownButton (
                items: _measures.map((String value) {
                  return DropdownMenuItem<String>(
                    value: value,
                    child: Text(value),
                  );
                }
                ).toList(),
                onChanged: (_) {},
              ),
          TextField(
            onChanged: (text) {
            var rv = double.tryParse(text);
             if (rv != null) {
                setState(() {
                     _numberFrom = rv;
                    });
                   }
                 } // onChanged
               ),
            Text((_numberFrom == null) ? '' : _numberFrom.toString())
            ], // Children
          ),
        ),
      )
    );
  } // Widget
} // MyAppState
----------------------------------------------------------------------------------------------------------------------------

UPDATING A DROPDOWNBUTTON WIDGET

1. Create a new string called _startMeasure at the top of the MyAppState class. It will contain the selected value from
   DropdownButton:

    String _startMeasure = 'meters'; // meters is set to the default

2. Instead of the underscore, call the parameter that is passed to the function, value.
3. Inside the function, call the setState() method to update _startMeasure with the new value that's passed. Here is the code:

   onChanged: (value) {
     setState(() {
       _startMeasure = value ?? ''; // ?? '' means if it is not null
     });
   }


4. Then include Text(_startMeasure ?? '') to display the value of _startMeasure if it is not null

5. Read the selected value so the DropdwonButton reads it when the app starts and every time it changes. Add the line to DropDownButton:

   value = _startMeasure,


UPDATED CODE: 


import 'package:flutter/material.dart';

void main() => runApp(MyApp());

class MyApp extends StatefulWidget {
  @override
  MyAppState createState() => MyAppState();
}
class MyAppState extends State<MyApp> {
  String _startMeasure = 'meters';
  double _numberFrom = 0.0;


  void initState() {
    _numberFrom = 0.0;
    super.initState();
  }

  final List<String> _measures = [
    'meters',
    'kilometers',
    'grams',
    'kilograms',
    'feet',
    'miles',
    'pounds (lbs)',
    'ounces',
  ];

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Measures Converter',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Measure Converter')
        ),
        body: Center(
          child: Column(
            children:  [
              DropdownButton (
                value: _startMeasure,
                items: _measures.map((String value) {
                  return DropdownMenuItem<String>(
                    value: value,
                    child: Text(value),
                  );
                }
                ).toList(),
                onChanged: (value) {
                  setState(() {
                    _startMeasure = value ?? '';
                  });
                },
              ),
          TextField(
            onChanged: (text) {
            var rv = double.tryParse(text);
             if (rv != null) {
                setState(() {
                     _numberFrom = rv;
                    });
                   }
                 } // onChanged
               ),
            Text((_numberFrom == null) ? '' : _numberFrom.toString()),
              Text(_startMeasure ?? '')
            ], // Children
          ),
        ),
      )
    );
  } // Widget
} // MyAppState
----------------------------------------------------------------------------------------------------------------------------
COMPLETE THE UI OF THE APP

We will need to show eight widgets on screen
1. Text containing "Value"
2. TextField for the start value
3. Text containing "From"
4. A DropdownButton widget for the start measure
5. Text containing "To"
6. A DropdownButton widget for the measure of the conversion
7. ElevatedButton to call the method that will convert the value
8. Text for the result of the conversion

Each element of the Column should be spaced and styled. 



1.  At the top of build() method, create a TextStyle widget, which we will use for TextFields, DropDownButtons, and Button. Call this inputStyle:

    final TextStyle inputStyle = TextStyle (
      fontSize: 20;
      color: Colors.blue[900],
    );


2. Create a second TextStyle widget, which we will use for the Text widgets in the column, call it labelStyle:

   final TextStyle labelStyle = TextStyle (
      fontSize: 24;
      color: Colors.grey[700],
    );


3. We want Column to take some distance from the horizontal device borders. So instead of returning Center widget, return Container, which 
   takes a padding of 20 logical pixels. Edge.Insets.symmetric allows you to specify a value for the horizontal or vertical paddings. Code is:

   body: Container(
      padding: dge.Insets.symmetric(horizontal: 20),
      child: Column(


4. We want to create space between the widgets in the column. User Spacer widget, this creates an empty space that can be used to set spacing between
   widgets. Spacer widget has a flex property whose default value is 1, and determines how much space we want to use. For instance, you have have two
   Spacer widgets, one with a flex property of 1, and another flex property of 2, the second will take double the space of the first. At the top
   of the Column, add the initial Spacer widget


    child: Column(
      children: [
        Spacer(),


5. Under the Spacer widget, add the first text in the column, containing 'Value' string. Also aplly labelStyle to this widget
   and under Text, we will place another Spacer:


    Text(
       'Value',
        style: labelStyle,
     ), 
     Spacer(),

6. Under the Text that contains 'Value' and its Spacer, we need to place the TextField that we previously create, to allow the user
   to input then umber that they want to convert. Edit TextField so that it takes the inputStyle TextStyle. We'll also set the decoration
   property of the TextField.

   - The decoration property of a TextField takes an InputDecoration object. InputDecoration allows you to specify the border, labels, icons,
     and styles that will be used to decorate a text field.


7. hintText is a piece of text that is shown when TextField is empty, to suggest which kind of input is expected from the user. In this case, add "Please
   inset the measure to be converted" as a hintText prompt for our TextField:

    TextField(
       style: inputStyle,
       decoration: InputDecoration(
          hintText: "Please insert the measure to be converted",
       ),
       onChanged: (text) {
          var rv = double.tryParse(text);
          if (rv != null) {
            setState(() {
              _numberFrom = rv;
          });
      }
     }
    ),


8. Under TextField, place another Spacer(), then a Text with 'From' and the labelStyle style:

   Spacer(),
       Text(
          'From',
           style: labelStyle,
       ),


9. Under the 'From' Text, plae the DropDownButton widget, whose value is _startMeasure, which you wrote in the previous section:

       DropdownButton (
            isExpanded: true,
                items: _measures.map((String value) {
                  return DropdownMenuItem<String>(
                    value: value,
                    child: Text(value),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _startMeasure = value ?? '';
                  });
                },
                value: _startMeasure,
              ),





10. Next, add another Text for the second dropdown: in this case, the Text will contain 'To', and the style will be labelStyle, as before:

     Spacer(),
       Text(
          'To',
           style: labelStyle,
       ),


11. Under the 'To' Text, we need to place the second DropdownButton widget, and this requires another class member: the first DropdownButton widget
    used _startMeasure for its value; this new one will ue _convertedMeasure. At the top of the MyAppState class, add the following declaration:

    String _convertedMeasure;


12. Now, we are ready to add the second DropDownButton widget: this will contain the same measures list as the previous one. The only difference here is that
    it will reference the _convertedMeasure variable. As usual, don't forget to add a Spacer() before the widget:

      Spacer(),
      DropdownButton (
            isExpanded: true,
            style: inputStyle,
                items: _measures.map((String value) {
                  return DropdownMenuItem<String>(
                    value: value,
                    child: Text(
                      value,
                      style: inputStyle,
                     ),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _convertedMeasure = value ?? '';
                  });
                },
                value: _convertedMeasure,
              ),


13. Next, add the button that will apply the conversion: it will be a RaisedButton with a Text of 'Convert', and the style of inputStyle. At this time, the onPressed event will
    do nothing, as we don't have the logic of the app ready yet. Before and after the button we'll place a Spacer, but this time, we will also set its flex property to 2. This way,
    the space between the button and the other widgets on screen will be twice the amount of the other spacers:

      Spacer(flex: 2,),
         RaisedButton(
             child: Text('Convert', style: inputStyle),
             onPressed: () => true,
            ),
          Spacer(flex: 2,),


14. Finally, we'll add the Text for the result of the conversion. For now, let's just leave _numberFrom value as Text; we'll change that in the next section. At the end of the result,
    we'll add the larget Spacer of this screen, with a flex value of 8, in order to leave some spacer at the end of the screen:

    Text((_numberFrom == null) ? '' : _numberFrom.toString()
       style: labelStyle),
    Spacer(flex: 8,),


15. Last step, on some devices, the UI may be bigger than the available screen when the keyboard appears on screen. This may cause an error in your app. In order to solve this issue, there's a 
    simple solution, which is reccomended that you always use when designing your layouts with Flutter. 

    You should put the Column widget into a scrollable widget, in this case, SingleChildScrollView. This will make the widgets on the screen scroll if they take more space that is available on screen.
    So just enclose Column into a SingleChildScrollView widget:

      body: Container(
        padding: EdgeInsets.symmetric(horizontal: 20),
        child: SingleChildScrollView(
           child:  Column{
               ....
      },
   ),
----------------------------------------------------------------------------------------------------------------------------
ADDING THE BUSINESS LOGIC

1. We'll need to convert the Strings of the measure units into numbers. At the top of the MyAppState class, add the following code, using Map:

   final Map<String, int> _measuresMap = {
    'meters' : 0,
    'kilometers' : 1,
    'grams' : 2,
    'kilograms' : 3,
    'feet' : 4,
    'miles' : 5, 
    'pounds (lbs)' : 6,
    'ounces' : 7,
   };

2. Maps allow you to insert key-value pairs, where the first element is the key, and the second is the value. When you need to retrieve a value from Map,
   you can use the follow syntax:

   myValue = measures('miles');

3. Next we'll create a list that contains all the multipliers that were shown in the previous diagram: 

   final dynamic _formulas = {
     '0':[1,0.001,0,0,3.28084,0.000621371,0,0],
     '1':[1000,1,0,0,3280.84,0.621371,0,0],
     '2':[0,0,1,0.0001,0,0,0.00220462,0.035274],
     '3':[0,0,1000,1,0,0,2.20462,35.274],
     '4':[0.3048,0.0003048,0,0,1,0.000189394,0,0],
     '5':[1609.34, 1.60934,0,0,5280,1,0,0],
     '6':[0,0,453.592,0.453592,0,0,1,16],
     '7':[0,0,28.3495,0.0283495,3.28084,0,0.0625, 1],
     };

4. Create a matrix that contains all the possible combinations of conversion formulas, we need to write the method that will convert the values using the formulas and the
   measures Map. 

   void convert(double value, String from, String to) {
      int nFrom = _measuresMap[from];
      int nTo = _measuresMap[to];
      var multiplier = _formulas[nFrom.toString()] [nTo];
      var result = valie * multiplier;
   }


Now show the result of the conversion to the user

1. Declare a String variable at the top of the MyAppState class:

   String _resultMessage;

2. In the convert() method, after calculating the result, populate the _resultMessage String, and call the setState() method to notify the framework
   that an update to the UI is needed:

   if (result == 0) {
     _resultMessage = 'This conversion cannot be performed';
   }
   else {
     _resultMessage = '${_numberFrom.toString()} $_startMessage are ${result.toString()} $_convertedMeasure';
   }
   setState(() {
     _resultMessage = _resultMessage;
   });

3. Call the convert() method when the user taps on the Convert button. Before calling the method, we'll check that every value has been set to prevent potential errors. Edit RaisedButton:

   RaisedButton(
     child: Text('Convert', style: inputStyle),
     onPressed: () {
       if (_startMeasure.isEmpty || _convertedMeasure.isEmpty || _numberFrom==0) {
         return;
       }
       else {
         convert(_numberFrom, _startMeasure, _convertedMeasure);
       }
     },
   ),

4. In order to show the result, update the Text widget, so that it shows the string that contains the message to the user:

   Text((_resultMessage == null) ? '' : _resultMessage,
      style: labelStyle),
