Understanding the Dart Language Basics

Example code:
void main() {
  String name = "Dart";
  print ("Hello $name!");
}

The main() function is the starting point of every Dart application. 

String name = "Dart"; is a variable declaration. You are declariing a variable called name, of type String, whose value is "Dart"/ 

print ("Hello $name!"); calls the print method and instead of doing a concatenation using the + sign, you use $ and insert a variable
without closing it. It is equivalent to the code:
print ("Hello " + name + "!");

There's also a generic variable declartation, in which you don't specify any type: you write the same code like this:
void main() {
  var name = "Dart";
  print ("Hello $name!");
}
----------------------------------------------------------------------------------------------------------------------------------------
The use of numbers, functions, and parameters in Dart with Area Calculator

There are two types of numbers in Dart with the num type:
int - contains interger values no larger than 64 bits
double - contains 64 but, double percision floating point numbers

Example code:
void main() {
  double result = calculateArea(12,5);
  print ("The result is" + result.toString());
}

You are declaring the variable result, of type double, which takes the return value of a function called calculateArea, which needs to 
be defined late. We are passing two numbers, 12 and 5, to the function. After the functiuon returns its value, we will display the result,
after converting it into a string. Now let's define calculateArea:

double calculateArea(double width, double height) {
  double area = width * height;
  return area;
}

int literals are automatically converted to doubles; for example, you can write double value = 2; This is instead of having to write 
double value = 2.0; 
In the calculateArea() function, the width and height are required. You can also add optional parameters to functions, by including them
in square brackets. If you add an optional parameter, make sure it has a default value because it can't have a null value.

double calculateArea(double width, double height, [bool isTriangle = false]) {
  double area;
  if (isTriangle) {
    area = width * height / 2;
  }
  else {
    area = width * height;
  }
  return area;
}

Now, from the main() method , we can call this function without or without the optional parameter.

void main() {
  double result = calculateArea(12,5,false);
  print("The result for a rectangle is " + result.toString());
  result = calculateArea(12,5,true);
  print("The result for a triangle is " + result.toString());
}

This code produces the result: 
The result of this rectangle is 60
The result of this triangle is 30
----------------------------------------------------------------------------------------------------------------------------------------
For Loops and Strings 

void main() {
  String myString = "Job";
  print(myString);
  
  String result = reverse(myString);   
    print(result);
}
  String reverse(String old) {
    int length = old.length; // sets value of length
    String res = ""; // sets results to "" to get ready to print
   
    for (int i = length - 1; i>=0; i--) {
      res += old.substring(i,i+1); 
      
    // okay let's break this for loop down. we start the for loop by defining i which will be the index. 
       it says i = length - 1. the length of the word - 1 would mean we start with the last letter of that
       word. for example, if the word is job. the length of this word is 3. 3 - 1 = 2. So at index 2, the 
       letter is b which is the last letter of the word. then i will decrement. it will do this as long i is
       greater than of equal to 0. 0 is the start of the index or the first letter. so this is the process of
       the iteration. during this iteration, we will apply the substring method n the string. It will then return
       a new string that is a substring of that string. Substring method takes in two values. The first value is 
       where the string will start and will include that value and the second value is where it stops or "up to" 
       which means it doesn't include that specific value, but everything before it. so if the string old = job the
      operations would look like this after each iteration: 

                    // res += old.substring(2, 2+ 1); which is b
                      
                    // res += old.substring(1, 1+1); which is o 
                      
                    // res += old.substring(0, 0 +1); which is J

                  // the += is important because it adds/connects the result of each iteration to each other to 
                     form the complete word. 
  }
    return res; // this returns the result of the for loop
}
----------------------------------------------------------------------------------------------------------------------------------------
Arrow operator
The => arrow operator is a shortcut that allows you to simplify writing a method particulary when it has a single return statement.
example 1: 
bool converttoBoolLong(int value) {
  if (value == 1) {
    return false;
  }
  else {
    return true;
  }
}

this method converToBoolLong() can be rewritten using an arrow operator:

bool convertToBoolLong(int value) => (value == 0) ? false : true;

another example:
String sayHello(String name) {
  return "Hello " + name;
}
can be rewritten as
String sayHello(String name) => "Hello " + name;


the ternary operator is a concise way to write an if statement. Consider the following statement:
if (value == 0) {
  i == false;
}
else {
  i == true;
}
can be rewritten as
i = (value == 0) ? false : true;
the ternary operator can omit the if statement, the curly braces, and the else statement. 
----------------------------------------------------------------------------------------------------------------------------------------
While loops, lists, and generics

One of the the first features that you generally meet when you learn a new language are arrays. In Dart, you use List objects when you want
to define a collection. Consider the following code: 

void main () {
  String sing() {
  List<String> songs = [];
  var songString = "";
  songs.add("We will Rock You");
  songs.add("One");
  songs.add("Sultan of Swing");
  int i = 0;
  while( i < songs.length) {
    songString += "${songs[i]} - ";
    i++
  }  
  return songString;
}

String mySongs = sing();
  print (mySongs);
}


Code Breakdown: 
The sing() method defines an empty list of strings.
List<String> songs = [];;

In Dart, the List class doesn't have a named constructor. Instead, you would typically use one of the following:
List<String> songs = [];: This initializes an empty list of strings using a list literal.

A list can contain several types of objects. You could have a list of integers, Booleans, or even user-defined objects. You can
also avoid specifying the kind of object that is contain in a list by just writing the following:
var songs = List(); // but we don't in this particular example code. 
The <String> after List is the generic syntax. The use of generics enforces a restriction on the type of values that can be contained in the
collection, creating a type-safe collection. 

List implement several methods. You use the add() method to insert a new object into the collection:
songs.add("We will Rock You");
The new object is added to the end of the list. You could reach exactly the same result by writing the following code:
var songs = ["We will Rock You", "One", "Sultans of Swing"];

The songs variable would still be a list of strings. If you tried to add a different data type such as songs.add(24), you would get an error. 
This is because an integer cannot be inserted into a list of strings, and type safety is enforced by default.

The while statement contains the condition that needs to be true for the loop to continue:
while (i < songs.length) {
when the condition (i < songs.length) becomes false, the code in the loop won't execute anymore. 

As you've already seen before, the += operator is a concatenation of strings. The $ character allows you to insert expressions into quotes:
songString += "$(songs[i]) - "

We them create a String variable called mySongs and call the sing() method on it and print the result.
----------------------------------------------------------------------------------------------------------------------------------------
foreach()

The for and while loops can be generally used for any type of loop, but lists also have some specific methods that help you write elegant and
readable code.
The foreach method of a list lets you run a function on each element in the array. So you could delete the while loop and use the following code 
instead to achieve the same results:

songs.forEach((song) => songString. += song + " - ");
----------------------------------------------------------------------------------------------------------------------------------------
map()
The map() method transforms each element in a list and returns the result of the transformation in a new list. 

void main() {
  String sing() {
  List<String> songs = [];
  songs.add("We will Rock You");
  songs.add("One");
  songs.add("Sultan of Swing");
  var capitalSongs = songs.map((song) => song.toUpperCase());
  return capitalSongs.toString();
}

  String mySongs = sing();
  print(mySongs);
}

The result of this code is that the songs are now printed in uppercase, but the interesting part of the code is the following line:
var capitalSongs = songs.map((song) => song.toUpperCase());
You can see the map() method of a list in action. For each element of the list, in this case a song, the element is transformed into 
song.toUpperCase(), and the end result is passed to a new variable, called capitalSongs. The toString() method transforms a list into a string.
The result that prints on the screen is:
(WE WILL ROCK YOU, ONE, SULTAN OF SWING)
----------------------------------------------------------------------------------------------------------------------------------------
where()

String sing() {
  List<String> songs = [];
  songs.add("We will Rock You");
  songs.add("One");
  songs.add("Sultan of Swing");
  var wSongs = songs.where((song) => song.contains('w'));
  return wSongs.toString();
}

The where() method only returns the elements that satisfy the song.contains('w') test expression. This only returns the songs that contain the 'w'
so the end result tha you see printed is: 
(We will Rock You, Sultan of Swing)
----------------------------------------------------------------------------------------------------------------------------------------
Classes and Objects

class Perseon {
  String name;
  String surname;
}
You can create instances of the Person class from the main method, and set the name and surname:
main() {
  Person clark = Person();
  clark.name = "Clark";
  clark.surname = "Kent";
  print ('$(clark.name) $(clark.surname)');
}

There are no identifiers suchas private and public in Dart. you also don't need to use the new keyword.
----------------------------------------------------------------------------------------------------------------------------------------
Using Getters and Setters

main() {
  class Person {
    String name, surname;
    int _age;

  void set age(int years) {
    if (years > 0 && years < 120) {
      _age = years;
    }
    else {
      _age = 0;
    }
  }

  int get age {
    return _age;
    }
  }


  Person clark = Person();
  clark.name = "Clark";
  clark.surname = "Kent";
  clark.age = 30;
  print ('$(clark.name) $(clark.surname) $(clark.age)');
}

In this example, we protect our data in the setter by making sure that the years are a number between 0 and 120. 
The getter just returns _age without any update
----------------------------------------------------------------------------------------------------------------------------------------
Constructors

main() {
  Person clark = Person('Clark', 'Kent');
  print('$(clark.name) $(clark.surname)');

  class Person {
    String name, surname;
    
      Person(String name, String surname) {
        this.name = name;
        this.surname = surname;
      }
}

If you wanted to add a second contructor that takes no parameters, you can try to add the second constructor as follows:
Person(); // However this would create an error because there default constructor is already defined.
This is because in Dart, you can only have one unnamed constructor but you can have any number of named constructors. We should
instead add the following code:
Person.empty() // This would successfully create a second named constructor.


 main() {
  Person clark = Person('Clark', 'Kent');
  Person luke = Person.empty();
  luke.name = "Luke";
  luke.surname = "Skywalker";
  print('${(clark.name)} ${clark.surname}');
  print('${(luke.name)} ${luke.surname}');
 }

class Person {
    String name, surname;
    
      Person(String name, String surname) {
        this.name = name;
        this.surname = surname;
      }

      Person.empty();
}
