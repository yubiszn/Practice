
1. Inserting an Item into a Heap:
Inserting an item into a heap involves maintaining the heap property (min-heap or max-heap). Here's a step-by-step example of inserting an element into a min-heap:

Step-by-Step Insertion Example:

Suppose we have a min-heap represented as an array: [6, 18, 29, 39, 66, 72, 81].

To insert the element 8 into this heap:

Place Element at Bottom: Insert 8 at the next available position, which would be at the end of the array: [6, 18, 29, 39, 66, 72, 81, 8].

Heapify Up: Compare 8 with its parent (39). Since 8 is smaller, swap them: [6, 18, 29, 8, 66, 72, 81, 39].

Continue swapping until the heap property is restored: [6, 8, 29, 18, 66, 72, 81, 39].

Now, 8 is correctly positioned in the heap.

2. Removing an Item from a Heap:
Removing an item from a heap typically involves removing the root element (for min-heap, the smallest element). Here's an example:

Step-by-Step Removal Example:

Starting with the heap [6, 8, 29, 18, 66, 72, 81, 39]:

Replace Root: Replace 6 with the last element (39): [39, 8, 29, 18, 66, 72, 81, 39].

Heapify Down: Move 39 down the heap by comparing with its children and swapping with the smaller child: [8, 18, 29, 39, 66, 72, 81].

After heapifying down, the heap property is restored.

3. Implementing a Heap:
A heap can be implemented efficiently using an array (or ArrayList in Java). The array representation follows specific rules for parent-child relationships:

Parent of node at index i: (i - 1) / 2
Left child of node at index i: 2 * i + 1
Right child of node at index i: 2 * i + 2
This allows for O(log n) time complexity for both insertion and removal operations.



1. Inserting an Item into a Heap:

import java.util.ArrayList;

public class MinHeap {
    private ArrayList<Integer> heap;

    public MinHeap() {
        heap = new ArrayList<>();
    }

    public void insert(int value) {
        heap.add(value);
        heapifyUp(heap.size() - 1);
    }

    private void heapifyUp(int index) {
        int parentIndex = (index - 1) / 2;
        while (index > 0 && heap.get(index) < heap.get(parentIndex)) {
            swap(index, parentIndex);
            index = parentIndex;
            parentIndex = (index - 1) / 2;
        }
    }

    private void swap(int i, int j) {
        int temp = heap.get(i);
        heap.set(i, heap.get(j));
        heap.set(j, temp);
    }
}

2. Removing an Item from a Heap:

public int removeMin() {
    if (heap.isEmpty()) {
        throw new IllegalStateException("Heap is empty");
    }
    int minValue = heap.get(0);
    heap.set(0, heap.remove(heap.size() - 1));
    heapifyDown(0);
    return minValue;
}

private void heapifyDown(int index) {
    int leftChildIndex = 2 * index + 1;
    int rightChildIndex = 2 * index + 2;
    int smallestChildIndex = index;

    if (leftChildIndex < heap.size() && heap.get(leftChildIndex) < heap.get(smallestChildIndex)) {
        smallestChildIndex = leftChildIndex;
    }
    if (rightChildIndex < heap.size() && heap.get(rightChildIndex) < heap.get(smallestChildIndex)) {
        smallestChildIndex = rightChildIndex;
    }

    if (smallestChildIndex != index) {
        swap(index, smallestChildIndex);
        heapifyDown(smallestChildIndex);
    }
}

3. Implementing a Heap (Min-Heap as an Array):

public class MinHeap {
    private int[] heap;
    private int size;
    private int capacity;

    public MinHeap(int capacity) {
        this.capacity = capacity;
        this.size = 0;
        this.heap = new int[capacity];
    }

    // Insert and remove methods as shown earlier
}

4. Insertion into a Heap Implemented as an ArrayList:

import java.util.ArrayList;

public class MinHeap {
    private ArrayList<Integer> heap;

    public MinHeap() {
        this.heap = new ArrayList<>();
    }

    public void insert(int value) {
        heap.add(value);
        heapifyUp(heap.size() - 1);
    }

    private void heapifyUp(int index) {
        int parentIndex = (index - 1) / 2;
        while (index > 0 && heap.get(index) < heap.get(parentIndex)) {
            // Swap index with parent
            int temp = heap.get(index);
            heap.set(index, heap.get(parentIndex));
            heap.set(parentIndex, temp);

            // Move up to parent index
            index = parentIndex;
            parentIndex = (index - 1) / 2;
        }
    }
}

5. Removing an Element from a Heap Implemented as an ArrayList:

public int removeMin() {
    if (heap.isEmpty()) {
        throw new IllegalStateException("Heap is empty");
    }

    int minValue = heap.get(0);
    heap.set(0, heap.remove(heap.size() - 1));
    heapifyDown(0);

    return minValue;
}

private void heapifyDown(int index) {
    int leftChildIndex = 2 * index + 1;
    int rightChildIndex = 2 * index + 2;
    int smallestChildIndex = index;

    if (leftChildIndex < heap.size() && heap.get(leftChildIndex) < heap.get(smallestChildIndex)) {
        smallestChildIndex = leftChildIndex;
    }
    if (rightChildIndex < heap.size() && heap.get(rightChildIndex) < heap.get(smallestChildIndex)) {
        smallestChildIndex = rightChildIndex;
    }

    if (smallestChildIndex != index) {
        int temp = heap.get(index);
        heap.set(index, heap.get(smallestChildIndex));
        heap.set(smallestChildIndex, temp);
        heapifyDown(smallestChildIndex);
    }
}
